@page "/counter"
@*加入要使用 BlazorOverview.Services 命名空間的 API*@
@using BlazorOverview.Models
@using BlazorOverview.Services
@*注入這個物件，使得在 Blazor 元件內，可以使用 C# 呼叫 JavaScript*@
@inject IJSRuntime jsRuntime
@*當這個 Blazor 元件建立之後，要注入這個 IMyNoteService 抽象型別的具體實作物件*@
@inject IMyNoteService MyNoteService
@inject ICountersService CountersService
@*注入 Blazored Modal 元件的實作物件*@
@inject IModalService Modal

<h1>Counter</h1>

<table class="table">
    <thead>
        <tr>
            <th>事項</th>
            <th>修改</th>
            <th>刪除</th>
        </tr>
    </thead>
    <tbody>
        @*列出集合清單中的每一筆紀錄到 HTML Table 內*@
        @foreach (var Item in CountDatas)
        {
            <tr>
                @*透過資料綁定，把集合清單內的紀錄屬性，顯示在網頁上*@
                <td>@Item.Id</td>
                <td>@Item.Title</td>
                <td>@Item.Count</td>
                <td>
                    @*透過 Blazor 的資料綁定，將修改按鈕的點選事件，綁定到 C# 的委派處理方法*@
                    @*當該修改按鈕點選事件被觸發的時候，將會把現在顯示的紀錄物件傳送過去*@
                    <input type="button" class="btn btn-primary" value="計數"
                    @onclick="()=>IncrementCount(Item)" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private void IncrementCount(NoteCludeCount item)
    {
        item.Count++; // 直接修改 List 內的物件屬性
        Update(item); 
    }

    // 儲存要顯示的集合清單內的所有紀錄
    public List<NoteCludeCount> CountDatas { get; set; } = new List<NoteCludeCount>();

    // 元件建立的時候，所要執行的初始化工作，這裡使用非同步方式來呼叫
    protected override async Task OnInitializedAsync()
    {
        // 透過 IMyNoteService.RetriveAsync() 方法，來取得所有記事清單
        CountDatas = await CountersService.RetriveAsync();
    }
    // 修改按鈕的點選事件之處理委派方法
    private async void Update(NoteCludeCount data)
    {
        var countData = new Counters
            {
                Count = data.Count,
                NoteId = data.Id
            };
        // 透過 IMyNoteService.UpdateAsync() 方法，修改該紀錄
        await CountersService.UpdateAsync(countData, countData);
    }
}
